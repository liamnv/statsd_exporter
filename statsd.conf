mappings:
  # Airflow StatsD metrics mappings (https://airflow.apache.org/docs/apache-airflow/stable/logging-monitoring/metrics.html)
  # === Counters ===
  - match: "airflow\\.(.+)_start"
    match_metric_type: counter
    name: "airflow_job_start"
    match_type: regex
    help: "Number of started <job_name> job, ex. SchedulerJob, LocalTaskJob"
    labels:
      job_name: "$1"
  - match: "airflow\\.(.+)_end"
    match_metric_type: counter
    name: "airflow_job_end"
    help: "Number of ended <job_name> job, ex. SchedulerJob, LocalTaskJob"
    match_type: regex
    labels:
      job_name: "$1"
  - match: "airflow\\.(.+)_heartbeat_failure"
    match_metric_type: counter
    help: "Number of failed Heartbeats for a <job_name> job, ex. SchedulerJob, LocalTaskJob"
    name: "airflow_job_heartbeat_failure"
    match_type: regex
    labels:
      job_name: "$1"
  - match: "airflow\\.operator_failures_(.+)"
    match_metric_type: counter
    help: "Operator <operator_name> failures"
    name: "airflow_operator_failures"
    match_type: regex
    labels:
      operator_name: "$1"
  - match: "airflow\\.operator_successes_(.+)"
    match_metric_type: counter
    help: "Operator <operator_name> successes"
    name: "airflow_operator_success"
    match_type: regex
    labels:
      operator_name: "$1"
  - match: "airflow.ti_failures"
    match_metric_type: counter
    name: "airflow_task_instance_failures"
    help: "Overall task instances failures"
  - match: "airflow.ti_successes"
    match_metric_type: counter
    name: "airflow_task_instance_successes"
    help: "Overall task instances successes"
  - match: "airflow.previously_succeeded"
    match_metric_type: counter
    name: "airflow_previously_succeeded"
    help: "Number of previously succeeded task instances"
  - match: "airflow.zombies_killed"
    match_metric_type: counter
    name: "airflow_zombies_killed"
    help: "Zombie tasks killed"
  - match: "airflow.scheduler_heartbeat"
    name: "airflow_scheduler_heartbeat"
    match_metric_type: counter
    help: "Scheduler heartbeats"
  - match: "airflow.dag_processing.processes"
    name: "airflow_dag_processing_processes"
    match_metric_type: counter
    help: "Number of currently running DAG parsing processes"
  - match: "airflow.dag_processing.manager_stalls"
    name: "airflow_dag_processing_manager_stalls"
    match_metric_type: counter
    help: "Number of stalled DagFileProcessorManager"
  - match: "airflow.dag_file_refresh_error"
    name: "airflow_dag_file_refresh_error"
    match_metric_type: counter
    help: "Number of failures loading any DAG files"
  - match: "airflow.scheduler.tasks.killed_externally"
    name: "airflow_scheduler_tasks_killed_externally"
    match_metric_type: counter
    help: "Number of tasks killed externally"
  - match: "airflow.scheduler.orphaned_tasks.cleared"
    name: "airflow_scheduler_orphaned_tasks_cleared"
    match_metric_type: counter
    help: "Number of Orphaned tasks cleared by the Scheduler"
  - match: "airflow.scheduler.orphaned_tasks.adopted"
    name: "airflow_scheduler_orphaned_tasks_adopted"
    match_metric_type: counter
    help: "Number of Orphaned tasks adopted by the Scheduler"
  - match: "airflow.scheduler.critical_section_busy"
    name: "airflow_scheduler_critical_section_busy"
    match_metric_type: counter
    help: "Count of times a scheduler process tried to get a lock on the critical section (needed to send tasks to the executor) and found it locked by another process."
  - match: "airflow.sla_email_notification_failure"
    name: "airflow_sla_email_notification_failure"
    match_metric_type: counter
    help: "Number of failed SLA miss email notification attempts"
  - match: "airflow.ti.start.*.*"
    help: "Number of started task in a given dag. Similar to <job_name>_start but for task"
    name: "airflow_task_instance_start"
    match_metric_type: counter
    labels:
      dag_id: "$1"
      task_id: "$2"
  - match: "airflow.ti.finish.*.*.*"
    help: "Number of completed task in a given dag. Similar to <job_name>_end but for task"
    name: "airflow_task_instance_finish"
    match_metric_type: counter
    labels:
      dag_id: "$1"
      task_id: "$2"
      state: "$3"
  - match: "airflow.dag.callback_exceptions"
    name: "airflow_dag_callback_exceptions"
    match_metric_type: counter
    help: "Number of exceptions raised from DAG callbacks. When this happens, it means DAG callback is not working."
  - match: "airflow.celery.task_timeout_error"
    name: "airflow_celery_task_timeout_error"
    match_metric_type: counter
    help: "Number of AirflowTaskTimeout errors raised when publishing Task to Celery Broker."
  - match: "airflow.task_removed_from_dag.*"
    name: "airflow_task_removed_from_dag"
    match_metric_type: counter
    help: "Number of tasks removed for a given dag (i.e. task no longer exists in DAG)"
    labels:
      dag_id: "$1"
  - match: "airflow.task_restored_to_dag.*"
    name: "airflow_task_restored_to_dag"
    match_metric_type: counter
    help: "Number of tasks restored for a given dag (i.e. task instance which was previously in REMOVED state in the DB is added to DAG file)"
    labels:
      dag_id: "$1"
  - match: "airflow.task_instance_created-(.+)"
    match_metric_type: counter
    match_type: regex
    help: "Number of tasks instances created for a given Operator"
    name: "airflow_task_instance_created"
    labels:
      operator_name: "$1"

# === Gauges ====
  - match: "airflow.dagbag_size"
    name: "airflow_dagbag_size"
    help: "DAG bag size"
    match_metric_type: gauge
  - match: "airflow.dag_processing.import_errors"
    name: "airflow_dag_processing_import_errors"
    help: "Number of errors from trying to parse DAG files"
    match_metric_type: gauge
  - match: "airflow.dag_processing.total_parse_time"
    name: "airflow_dag_processing_total_parse_time"
    help: "Number of errors from trying to parse DAG files"
    match_metric_type: gauge
  - match: "airflow.dag_processing.last_runtime.*"
    name: "airflow_dag_processing_last_runtime"
    help: "Seconds spent processing <dag_file> (in most recent iteration)"
    match_metric_type: gauge
    labels:
      dag_file: "$1"
  - match: "airflow.dag_processing.last_run.seconds_ago.*"
    name: "airflow_dag_processing_last_run_seconds_ago"
    match_metric_type: gauge
    help: "Seconds since <dag_file> was last processed"
    labels:
      dag_file: "$1"
  - match: "airflow.dag_processing.processor_timeouts"
    name: "airflow_dag_processing_processor_timeouts"
    match_metric_type: gauge
    help: "Number of file processors that have been killed due to taking too long"
  - match: "airflow.scheduler.tasks.without_dagrun"
    name: "airflow_scheduler_tasks_without_dagrun"
    match_metric_type: gauge
    help: "Number of tasks without DagRuns or with DagRuns not in Running state"
  - match: "airflow.scheduler.tasks.running"
    name: "airflow_scheduler_tasks_running"
    match_metric_type: gauge
    help: "Number of tasks running in executor"
  - match: "airflow.scheduler.tasks.starving"
    name: "airflow_scheduler_tasks_starving"
    match_metric_type: gauge
    help: "Number of tasks that cannot be scheduled because of no open slot in pool"
  - match: "airflow.scheduler.tasks.executable"
    name: "airflow_scheduler_tasks_executable"
    match_metric_type: gauge
    help: "Number of tasks that are ready for execution (set to queued) with respect to pool limits, dag concurrency, executor state, and priority."
  - match: "airflow.executor.open_slots"
    name: "airflow_executor_open_slots"
    match_metric_type: gauge
    help: "Number of open slots on executor"
  - match: "airflow.executor.queued_tasks"
    name: "airflow_executor_queued_tasks"
    match_metric_type: gauge
    help: "Number of queued tasks on executor"
  - match: "airflow.executor.running_tasks"
    name: "airflow_executor_running_tasks"
    match_metric_type: gauge
    help: "Number of running tasks on executor"
  - match: "airflow.pool.open_slots.*"
    name: "airflow_pool_open_slots"
    match_metric_type: gauge
    help: "Number of open slots in the pool"
  - match: "airflow.pool.queued_slots.*"
    name: "airflow_pool_queued_slots"
    match_metric_type: gauge
    help: "Number of queued slots in the pool"
  - match: "airflow.pool.running_slots.*"
    name: "airflow_pool_running_slots"
    match_metric_type: gauge
    help: "Number of running slots in the pool"
  - match: "airflow.pool.starving_tasks.*"
    name: "airflow_pool_starving_tasks"
    match_metric_type: gauge
    help: "Number of starving tasks in the pool"
  - match: "airflow.smart_sensor_operator.poked_tasks"
    name: "airflow_smart_sensor_operator_poked_tasks"
    match_metric_type: gauge
    help: "Number of tasks poked by the smart sensor in the previous poking loop"
  - match: "airflow.smart_sensor_operator.poked_success"
    name: "airflow_smart_sensor_operator_poked_success"
    match_metric_type: gauge
    help: "Number of newly succeeded tasks poked by the smart sensor in the previous poking loop"
  - match: "airflow.smart_sensor_operator.poked_exception"
    name: "airflow_smart_sensor_operator_poked_exception"
    match_metric_type: gauge
    help: "Number of exceptions in the previous smart sensor poking loop"
  - match: "airflow.smart_sensor_operator.exception_failures"
    name: "airflow_smart_sensor_operator_exception_failures"
    match_metric_type: gauge
    help: "Number of failures caused by exception in the previous smart sensor poking loop"
  - match: "airflow.smart_sensor_operator.infra_failures"
    name: "airflow_smart_sensor_operator_infra_failures"
    match_metric_type: gauge
    help: "Number of infrastructure failures in the previous smart sensor poking loop"
# === StatsD Timer -> Prometheus Histogram ===
  - match: "airflow.dagrun.dependency-check.*"
    name: "airflow_dagrun_dependency_check"
    help: "Milliseconds taken to check DAG dependencies"
    labels:
      dag_id: "$1"
  - match: "airflow.dag.*.*.duration"
    help: ""
    name: "airflow_task_duration"
    labels:
      dag_id: "$1"
      task_id: "$2"
  - match: "airflow.dag_processing.last_duration.*"
    name: "airflow_dag_processing_last_duration"
    help: "Milliseconds taken to load the given DAG file"
    labels:
      dag_id: "$1"
  - match: "airflow.dagrun.duration.success.*"
    name: "airflow_dagrun_duration_success"
    help: "Milliseconds taken for a DagRun to reach success state"
    labels:
      dag_id: "$1"
  - match: "airflow.dagrun.duration.failed.*"
    name: "airflow_dagrun_duration_failed"
    help: "Milliseconds taken for a DagRun to reach failed state"
    labels:
      dag_id: "$1"
  - match: "airflow.dagrun.schedule_delay.*"
    name: "airflow_dagrun_schedule_delay"
    help: "Milliseconds of delay between the scheduled DagRun start date and the actual DagRun start date"
    labels:
      dag_id: "$1"
  - match: "airflow.scheduler.critical_section_duration"
    name: "airflow_scheduler_critical_section_duration"
    help: "Milliseconds spent in the critical section of scheduler loop -- only a single scheduler can enter this loop at a time"
  - match: "airflow.dagrun.*.first_task_scheduling_delay"
    name: "airflow_dagrun_first_task_scheduling_delay"
    help: "Milliseconds elapsed between first task start_date and dagrun expected start"
    labels:
      dag_id: "$1"
  - match: "airflow.collect_db_dags"
    name: "airflow_collect_db_dags"
    help: "Milliseconds taken for fetching all Serialized Dags from DB"
